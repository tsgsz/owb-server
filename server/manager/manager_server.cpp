// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "owb/server/services/manager.h"

#include "thirdparty/gflags/gflgas.h"
#include "thirdparty/thrift/protocol/TBinaryProtocol.h"
#include "thirdparty/thrift/server/TSimpleServer.h"
#include "thirdparty/thrift/transport/TServerSocket.h"
#include "thirparty/thrift/transport/TBufferTransports.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::owb::server::services;

DEFINE_string(manager_db_name, "OwbManagerDb", "Name of manager database");
DEFINE_string(manager_db_user, "mysql", "UserName of manager database");
DEFINE_string(manager_db_password, "mysql", "Password of manager database");
DEFINE_string(manager_db_ip, "localhost", "Ip address of manager database");

class managerHandler : virtual public managerIf {
 public:
  managerHandler() {

  }

  bool Login(const  ::owb::server::models::OwbUser& user) {
    // Your implementation goes here
    printf("Login\n");
  }

  void JoinMeeting( ::owb::server::models::OwbServerInfo& _return, const std::string& uname, const std::string& mid) {
    // Your implementation goes here
    printf("JoinMeeting\n");
  }

  void CreateMeeting(std::string& _return, const std::string& uname) {
    // Your implementation goes here
    printf("CreateMeeting\n");
  }

  bool HeartBeatWithMonitor(const  ::owb::server::models::OwbServerHbPack& pack) {
    // Your implementation goes here
    printf("HeartBeatWithMonitor\n");
  }

  bool MeetingOver(const std::string& mid) {
    // Your implementation goes here
    printf("MeetingOver\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<managerHandler> handler(new managerHandler());
  shared_ptr<TProcessor> processor(new managerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

